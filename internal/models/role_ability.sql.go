// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role_ability.sql

package models

import (
	"context"
)

const createRoleAbilityJoin = `-- name: CreateRoleAbilityJoin :exec
insert into role_ability (role_id, ability_id) values ($1, $2)
`

type CreateRoleAbilityJoinParams struct {
	RoleID    int32 `json:"role_id"`
	AbilityID int32 `json:"ability_id"`
}

func (q *Queries) CreateRoleAbilityJoin(ctx context.Context, arg CreateRoleAbilityJoinParams) error {
	_, err := q.db.Exec(ctx, createRoleAbilityJoin, arg.RoleID, arg.AbilityID)
	return err
}

const getRandomAnyAbilityByMinimumRarity = `-- name: GetRandomAnyAbilityByMinimumRarity :one
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
where
    ability_info.any_ability = true
    and ability_info.rarity >= $1
    and ability_info.rarity != 'ROLE_SPECIFIC'
`

func (q *Queries) GetRandomAnyAbilityByMinimumRarity(ctx context.Context, rarity Rarity) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getRandomAnyAbilityByMinimumRarity, rarity)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const getRandomAnyAbilityByRarity = `-- name: GetRandomAnyAbilityByRarity :one
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
where ability_info.any_ability = true and ability_info.rarity == $1
`

func (q *Queries) GetRandomAnyAbilityByRarity(ctx context.Context, rarity Rarity) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getRandomAnyAbilityByRarity, rarity)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const getRandomAnyAbilityIncludingRoleSpecific = `-- name: GetRandomAnyAbilityIncludingRoleSpecific :one
select ability_info.id, ability_info.name, ability_info.description, ability_info.default_charges, ability_info.any_ability, ability_info.role_specific_id, ability_info.rarity
from role_ability
inner join ability_info on ability_info.id = role_ability.ability_id
where
    (ability_info.any_ability = true and ability_info.rarity = $1)
    or (role_ability.role_id = $2 and ability_info.any_ability = true)
order by random()
limit 1
`

type GetRandomAnyAbilityIncludingRoleSpecificParams struct {
	Rarity Rarity `json:"rarity"`
	RoleID int32  `json:"role_id"`
}

func (q *Queries) GetRandomAnyAbilityIncludingRoleSpecific(ctx context.Context, arg GetRandomAnyAbilityIncludingRoleSpecificParams) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getRandomAnyAbilityIncludingRoleSpecific, arg.Rarity, arg.RoleID)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const listAnyAbilities = `-- name: ListAnyAbilities :many
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
where ability_info.any_ability = true and ability_info.rarity != 'ROLE_SPECIFIC'
`

func (q *Queries) ListAnyAbilities(ctx context.Context) ([]AbilityInfo, error) {
	rows, err := q.db.Query(ctx, listAnyAbilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AbilityInfo
	for rows.Next() {
		var i AbilityInfo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DefaultCharges,
			&i.AnyAbility,
			&i.RoleSpecificID,
			&i.Rarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAnyAbilitiesIncludingRoleSpecific = `-- name: ListAnyAbilitiesIncludingRoleSpecific :many
select distinct ability_info.id, ability_info.name, ability_info.description, ability_info.default_charges, ability_info.any_ability, ability_info.role_specific_id, ability_info.rarity
from role_ability
inner join ability_info on ability_info.id = role_ability.ability_id
where
    (ability_info.any_ability = true and ability_info.rarity != 'ROLE_SPECIFIC')
    or (role_ability.role_id = $1 and ability_info.any_ability = true)
`

func (q *Queries) ListAnyAbilitiesIncludingRoleSpecific(ctx context.Context, roleID int32) ([]AbilityInfo, error) {
	rows, err := q.db.Query(ctx, listAnyAbilitiesIncludingRoleSpecific, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AbilityInfo
	for rows.Next() {
		var i AbilityInfo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DefaultCharges,
			&i.AnyAbility,
			&i.RoleSpecificID,
			&i.Rarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssociatedRolesForAbility = `-- name: ListAssociatedRolesForAbility :many
select role.id, role.name, role.description, role.alignment
from role_ability
inner join role on role.id = role_ability.role_id
where role_ability.ability_id = $1
`

func (q *Queries) ListAssociatedRolesForAbility(ctx context.Context, abilityID int32) ([]Role, error) {
	rows, err := q.db.Query(ctx, listAssociatedRolesForAbility, abilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Alignment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleAbilityForRole = `-- name: ListRoleAbilityForRole :many
select ability_info.id, ability_info.name, ability_info.description, ability_info.default_charges, ability_info.any_ability, ability_info.role_specific_id, ability_info.rarity
from role_ability
inner join ability_info on role_ability.ability_id = ability_info.id
where role_ability.role_id = $1
`

func (q *Queries) ListRoleAbilityForRole(ctx context.Context, roleID int32) ([]AbilityInfo, error) {
	rows, err := q.db.Query(ctx, listRoleAbilityForRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AbilityInfo
	for rows.Next() {
		var i AbilityInfo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DefaultCharges,
			&i.AnyAbility,
			&i.RoleSpecificID,
			&i.Rarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
