// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admin_channel.sql

package models

import (
	"context"
)

const createAdminChannel = `-- name: CreateAdminChannel :one
INSERT INTO admin_channel 
(channel_id) 
VALUES ($1) 
returning channel_id
`

func (q *Queries) CreateAdminChannel(ctx context.Context, channelID string) (string, error) {
	row := q.db.QueryRow(ctx, createAdminChannel, channelID)
	var channel_id string
	err := row.Scan(&channel_id)
	return channel_id, err
}

const deleteAdminChannel = `-- name: DeleteAdminChannel :exec
delete from admin_channel
where channel_id = $1
`

func (q *Queries) DeleteAdminChannel(ctx context.Context, channelID string) error {
	_, err := q.db.Exec(ctx, deleteAdminChannel, channelID)
	return err
}

const listAdminChannel = `-- name: ListAdminChannel :many
select channel_id
from admin_channel
`

func (q *Queries) ListAdminChannel(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, listAdminChannel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var channel_id string
		if err := rows.Scan(&channel_id); err != nil {
			return nil, err
		}
		items = append(items, channel_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
