// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player_status.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayerStatusJoin = `-- name: CreatePlayerStatusJoin :one
INSERT INTO player_status (player_id, status_id) VALUES ($1, $2) RETURNING player_id, status_id, quantity, created_at
`

type CreatePlayerStatusJoinParams struct {
	PlayerID int64 `json:"player_id"`
	StatusID int32 `json:"status_id"`
}

func (q *Queries) CreatePlayerStatusJoin(ctx context.Context, arg CreatePlayerStatusJoinParams) (PlayerStatus, error) {
	row := q.db.QueryRow(ctx, createPlayerStatusJoin, arg.PlayerID, arg.StatusID)
	var i PlayerStatus
	err := row.Scan(
		&i.PlayerID,
		&i.StatusID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlayerStatus = `-- name: DeletePlayerStatus :exec
delete from player_status
where player_id = $1 and status_id = $2
`

type DeletePlayerStatusParams struct {
	PlayerID int64 `json:"player_id"`
	StatusID int32 `json:"status_id"`
}

func (q *Queries) DeletePlayerStatus(ctx context.Context, arg DeletePlayerStatusParams) error {
	_, err := q.db.Exec(ctx, deletePlayerStatus, arg.PlayerID, arg.StatusID)
	return err
}

const listPlayerStatus = `-- name: ListPlayerStatus :many
select status.id, status.name, status.description, status.hour_duration, player_status.created_at
from player_status
inner join status on player_status.status_id = status.id
where player_status.player_id = $1
`

type ListPlayerStatusRow struct {
	ID           int32            `json:"id"`
	Name         string           `json:"name"`
	Description  string           `json:"description"`
	HourDuration int32            `json:"hour_duration"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) ListPlayerStatus(ctx context.Context, playerID int64) ([]ListPlayerStatusRow, error) {
	rows, err := q.db.Query(ctx, listPlayerStatus, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerStatusRow
	for rows.Next() {
		var i ListPlayerStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HourDuration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlayerStatusInventory = `-- name: ListPlayerStatusInventory :many
select status.id, status.name, status.description, status.hour_duration, player_status.quantity, player_status.created_at
from player_status
inner join status on player_status.status_id = status.id
where player_status.player_id = $1
`

type ListPlayerStatusInventoryRow struct {
	ID           int32            `json:"id"`
	Name         string           `json:"name"`
	Description  string           `json:"description"`
	HourDuration int32            `json:"hour_duration"`
	Quantity     int32            `json:"quantity"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) ListPlayerStatusInventory(ctx context.Context, playerID int64) ([]ListPlayerStatusInventoryRow, error) {
	rows, err := q.db.Query(ctx, listPlayerStatusInventory, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPlayerStatusInventoryRow
	for rows.Next() {
		var i ListPlayerStatusInventoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.HourDuration,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerStatusQuantity = `-- name: UpdatePlayerStatusQuantity :one
UPDATE player_status SET quantity = $3 WHERE player_id = $1 AND status_id = $2 RETURNING player_id, status_id, quantity, created_at
`

type UpdatePlayerStatusQuantityParams struct {
	PlayerID int64 `json:"player_id"`
	StatusID int32 `json:"status_id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdatePlayerStatusQuantity(ctx context.Context, arg UpdatePlayerStatusQuantityParams) (PlayerStatus, error) {
	row := q.db.QueryRow(ctx, updatePlayerStatusQuantity, arg.PlayerID, arg.StatusID, arg.Quantity)
	var i PlayerStatus
	err := row.Scan(
		&i.PlayerID,
		&i.StatusID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const upsertPlayerStatusJoin = `-- name: UpsertPlayerStatusJoin :exec
INSERT INTO player_status (player_id, status_id, quantity) VALUES ($1, $2, $3)
ON CONFLICT (player_id, status_id)
DO UPDATE SET quantity = player_status.quantity + EXCLUDED.quantity
`

type UpsertPlayerStatusJoinParams struct {
	PlayerID int64 `json:"player_id"`
	StatusID int32 `json:"status_id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpsertPlayerStatusJoin(ctx context.Context, arg UpsertPlayerStatusJoinParams) error {
	_, err := q.db.Exec(ctx, upsertPlayerStatusJoin, arg.PlayerID, arg.StatusID, arg.Quantity)
	return err
}
