// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role_perk.sql

package models

import (
	"context"
)

const createRolePerkJoin = `-- name: CreateRolePerkJoin :exec
INSERT INTO role_perk (role_id, perk_id) VALUES ($1, $2)
`

type CreateRolePerkJoinParams struct {
	RoleID int32 `json:"role_id"`
	PerkID int32 `json:"perk_id"`
}

func (q *Queries) CreateRolePerkJoin(ctx context.Context, arg CreateRolePerkJoinParams) error {
	_, err := q.db.Exec(ctx, createRolePerkJoin, arg.RoleID, arg.PerkID)
	return err
}

const listAssociatedRolesForPerk = `-- name: ListAssociatedRolesForPerk :many
select role.id, role.name, role.description, role.alignment from role_perk 
inner join role on role.id = role_perk.role_id
where role_perk.perk_id = $1
`

func (q *Queries) ListAssociatedRolesForPerk(ctx context.Context, perkID int32) ([]Role, error) {
	rows, err := q.db.Query(ctx, listAssociatedRolesForPerk, perkID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Alignment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolePerkForRole = `-- name: ListRolePerkForRole :many
select perk_info.id, perk_info.name, perk_info.description from role_perk
inner join perk_info on role_perk.perk_id = perk_info.id
where role_perk.role_id = $1
`

func (q *Queries) ListRolePerkForRole(ctx context.Context, roleID int32) ([]PerkInfo, error) {
	rows, err := q.db.Query(ctx, listRolePerkForRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerkInfo
	for rows.Next() {
		var i PerkInfo
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
