// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: perk_info.sql

package models

import (
	"context"
)

const createPerkInfo = `-- name: CreatePerkInfo :one
INSERT INTO perk_info (name, description) VALUES ($1, $2) RETURNING id, name, description
`

type CreatePerkInfoParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreatePerkInfo(ctx context.Context, arg CreatePerkInfoParams) (PerkInfo, error) {
	row := q.db.QueryRow(ctx, createPerkInfo, arg.Name, arg.Description)
	var i PerkInfo
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deletePerkInfo = `-- name: DeletePerkInfo :exec
delete from perk_info
where id = $1
`

func (q *Queries) DeletePerkInfo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePerkInfo, id)
	return err
}

const getPerkInfo = `-- name: GetPerkInfo :one
select id, name, description
from perk_info
where id = $1
`

func (q *Queries) GetPerkInfo(ctx context.Context, id int32) (PerkInfo, error) {
	row := q.db.QueryRow(ctx, getPerkInfo, id)
	var i PerkInfo
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getPerkInfoByFuzzy = `-- name: GetPerkInfoByFuzzy :one
select id, name, description
from perk_info
order by levenshtein(name, $1) asc
limit 1
`

func (q *Queries) GetPerkInfoByFuzzy(ctx context.Context, levenshtein string) (PerkInfo, error) {
	row := q.db.QueryRow(ctx, getPerkInfoByFuzzy, levenshtein)
	var i PerkInfo
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getPerkInfoByName = `-- name: GetPerkInfoByName :one
select id, name, description
from perk_info
where name = $1
`

func (q *Queries) GetPerkInfoByName(ctx context.Context, name string) (PerkInfo, error) {
	row := q.db.QueryRow(ctx, getPerkInfoByName, name)
	var i PerkInfo
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listPerkInfo = `-- name: ListPerkInfo :many
select id, name, description
from perk_info
`

func (q *Queries) ListPerkInfo(ctx context.Context) ([]PerkInfo, error) {
	rows, err := q.db.Query(ctx, listPerkInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PerkInfo
	for rows.Next() {
		var i PerkInfo
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
