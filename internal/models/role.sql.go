// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package models

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO role (name, description, alignment) VALUES ($1, $2, $3) RETURNING id, name, description, alignment
`

type CreateRoleParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Alignment   Alignment `json:"alignment"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description, arg.Alignment)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Alignment,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
delete from role
where id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
select id, name, description, alignment
from role
where id = $1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Alignment,
	)
	return i, err
}

const getRoleByFuzzy = `-- name: GetRoleByFuzzy :one
select id, name, description, alignment
from role
order by levenshtein(name, $1) asc
limit 1
`

func (q *Queries) GetRoleByFuzzy(ctx context.Context, levenshtein string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByFuzzy, levenshtein)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Alignment,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
select id, name, description, alignment
from role
where name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Alignment,
	)
	return i, err
}

const listRolesByName = `-- name: ListRolesByName :many
select id, name, description, alignment
from role
where name = any($1::text[])
`

func (q *Queries) ListRolesByName(ctx context.Context, dollar_1 []string) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRolesByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Alignment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listrole = `-- name: Listrole :many
select id, name, description, alignment
from role
`

func (q *Queries) Listrole(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listrole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Alignment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nukeRoles = `-- name: NukeRoles :exec
TRUNCATE TABLE role, role_ability, role_perk, role_ability, role_perk, ability_category RESTART IDENTITY CASCADE
`

func (q *Queries) NukeRoles(ctx context.Context) error {
	_, err := q.db.Exec(ctx, nukeRoles)
	return err
}
