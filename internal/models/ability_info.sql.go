// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ability_info.sql

package models

import (
	"context"
)

const createAbilityInfo = `-- name: CreateAbilityInfo :one
INSERT INTO ability_info (name, description, default_charges, any_ability, rarity) VALUES ($1, $2, $3, $4, $5) RETURNING id, name, description, default_charges, any_ability, role_specific_id, rarity
`

type CreateAbilityInfoParams struct {
	Name           string `json:"name"`
	Description    string `json:"description"`
	DefaultCharges int32  `json:"default_charges"`
	AnyAbility     bool   `json:"any_ability"`
	Rarity         Rarity `json:"rarity"`
}

func (q *Queries) CreateAbilityInfo(ctx context.Context, arg CreateAbilityInfoParams) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, createAbilityInfo,
		arg.Name,
		arg.Description,
		arg.DefaultCharges,
		arg.AnyAbility,
		arg.Rarity,
	)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const deleteAbilityInfo = `-- name: DeleteAbilityInfo :exec
delete from ability_info
where id = $1
`

func (q *Queries) DeleteAbilityInfo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAbilityInfo, id)
	return err
}

const getAbilityInfo = `-- name: GetAbilityInfo :one
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
where id = $1
`

func (q *Queries) GetAbilityInfo(ctx context.Context, id int32) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getAbilityInfo, id)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const getAbilityInfoByFuzzy = `-- name: GetAbilityInfoByFuzzy :one
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
order by levenshtein(name, $1) asc
limit 1
`

func (q *Queries) GetAbilityInfoByFuzzy(ctx context.Context, levenshtein string) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getAbilityInfoByFuzzy, levenshtein)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const getAbilityInfoByName = `-- name: GetAbilityInfoByName :one
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
where name = $1
`

func (q *Queries) GetAbilityInfoByName(ctx context.Context, name string) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getAbilityInfoByName, name)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const getAnyAbilityByFuzzy = `-- name: GetAnyAbilityByFuzzy :one
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
where ability_info.any_ability = true
order by levenshtein(name, $1) asc
limit 1
`

func (q *Queries) GetAnyAbilityByFuzzy(ctx context.Context, levenshtein string) (AbilityInfo, error) {
	row := q.db.QueryRow(ctx, getAnyAbilityByFuzzy, levenshtein)
	var i AbilityInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DefaultCharges,
		&i.AnyAbility,
		&i.RoleSpecificID,
		&i.Rarity,
	)
	return i, err
}

const listAbilityInfo = `-- name: ListAbilityInfo :many
select id, name, description, default_charges, any_ability, role_specific_id, rarity
from ability_info
`

func (q *Queries) ListAbilityInfo(ctx context.Context) ([]AbilityInfo, error) {
	rows, err := q.db.Query(ctx, listAbilityInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AbilityInfo
	for rows.Next() {
		var i AbilityInfo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DefaultCharges,
			&i.AnyAbility,
			&i.RoleSpecificID,
			&i.Rarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
