// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player_note.sql

package models

import (
	"context"
)

const createPlayerNote = `-- name: CreatePlayerNote :one
insert into player_note 
  (player_id, position, info) 
values ($1, $2, $3) 
returning player_id, note_id, position, info, updated_at
`

type CreatePlayerNoteParams struct {
	PlayerID int64  `json:"player_id"`
	Position int32  `json:"position"`
	Info     string `json:"info"`
}

func (q *Queries) CreatePlayerNote(ctx context.Context, arg CreatePlayerNoteParams) (PlayerNote, error) {
	row := q.db.QueryRow(ctx, createPlayerNote, arg.PlayerID, arg.Position, arg.Info)
	var i PlayerNote
	err := row.Scan(
		&i.PlayerID,
		&i.NoteID,
		&i.Position,
		&i.Info,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlayerNote = `-- name: DeletePlayerNote :exec
delete from player_note
where player_id = $1 and note_id = $2
`

type DeletePlayerNoteParams struct {
	PlayerID int64 `json:"player_id"`
	NoteID   int32 `json:"note_id"`
}

func (q *Queries) DeletePlayerNote(ctx context.Context, arg DeletePlayerNoteParams) error {
	_, err := q.db.Exec(ctx, deletePlayerNote, arg.PlayerID, arg.NoteID)
	return err
}

const deletePlayerNoteByPosition = `-- name: DeletePlayerNoteByPosition :exec
delete from player_note
where player_id = $1 and position = $2
`

type DeletePlayerNoteByPositionParams struct {
	PlayerID int64 `json:"player_id"`
	Position int32 `json:"position"`
}

func (q *Queries) DeletePlayerNoteByPosition(ctx context.Context, arg DeletePlayerNoteByPositionParams) error {
	_, err := q.db.Exec(ctx, deletePlayerNoteByPosition, arg.PlayerID, arg.Position)
	return err
}

const getPlayerNote = `-- name: GetPlayerNote :one
select player_id, note_id, position, info, updated_at
from player_note
where player_id = $1 and note_id = $2
`

type GetPlayerNoteParams struct {
	PlayerID int64 `json:"player_id"`
	NoteID   int32 `json:"note_id"`
}

func (q *Queries) GetPlayerNote(ctx context.Context, arg GetPlayerNoteParams) (PlayerNote, error) {
	row := q.db.QueryRow(ctx, getPlayerNote, arg.PlayerID, arg.NoteID)
	var i PlayerNote
	err := row.Scan(
		&i.PlayerID,
		&i.NoteID,
		&i.Position,
		&i.Info,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayerNoteByPosition = `-- name: GetPlayerNoteByPosition :one
select player_id, note_id, position, info, updated_at
from player_note
where player_id = $1 and position = $2
`

type GetPlayerNoteByPositionParams struct {
	PlayerID int64 `json:"player_id"`
	Position int32 `json:"position"`
}

func (q *Queries) GetPlayerNoteByPosition(ctx context.Context, arg GetPlayerNoteByPositionParams) (PlayerNote, error) {
	row := q.db.QueryRow(ctx, getPlayerNoteByPosition, arg.PlayerID, arg.Position)
	var i PlayerNote
	err := row.Scan(
		&i.PlayerID,
		&i.NoteID,
		&i.Position,
		&i.Info,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlayerNoteCount = `-- name: GetPlayerNoteCount :one
select count(*) as note_count
from player_note
where player_id = $1
`

func (q *Queries) GetPlayerNoteCount(ctx context.Context, playerID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getPlayerNoteCount, playerID)
	var note_count int64
	err := row.Scan(&note_count)
	return note_count, err
}

const listPlayerNote = `-- name: ListPlayerNote :many
select player_id, note_id, position, info, updated_at
from player_note
where player_id = $1
`

func (q *Queries) ListPlayerNote(ctx context.Context, playerID int64) ([]PlayerNote, error) {
	rows, err := q.db.Query(ctx, listPlayerNote, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayerNote
	for rows.Next() {
		var i PlayerNote
		if err := rows.Scan(
			&i.PlayerID,
			&i.NoteID,
			&i.Position,
			&i.Info,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayerNoteByPosition = `-- name: UpdatePlayerNoteByPosition :one
update player_note 
set info = $3, updated_at = now()
where player_id = $1 and position = $2
returning player_id, note_id, position, info, updated_at
`

type UpdatePlayerNoteByPositionParams struct {
	PlayerID int64  `json:"player_id"`
	Position int32  `json:"position"`
	Info     string `json:"info"`
}

func (q *Queries) UpdatePlayerNoteByPosition(ctx context.Context, arg UpdatePlayerNoteByPositionParams) (PlayerNote, error) {
	row := q.db.QueryRow(ctx, updatePlayerNoteByPosition, arg.PlayerID, arg.Position, arg.Info)
	var i PlayerNote
	err := row.Scan(
		&i.PlayerID,
		&i.NoteID,
		&i.Position,
		&i.Info,
		&i.UpdatedAt,
	)
	return i, err
}
