// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player_lifeboard.sql

package models

import (
	"context"
)

const createPlayerLifeboard = `-- name: CreatePlayerLifeboard :one
insert into player_lifeboard 
  (channel_id, message_id) VALUES ($1, $2) RETURNING channel_id, message_id
`

type CreatePlayerLifeboardParams struct {
	ChannelID string `json:"channel_id"`
	MessageID string `json:"message_id"`
}

func (q *Queries) CreatePlayerLifeboard(ctx context.Context, arg CreatePlayerLifeboardParams) (PlayerLifeboard, error) {
	row := q.db.QueryRow(ctx, createPlayerLifeboard, arg.ChannelID, arg.MessageID)
	var i PlayerLifeboard
	err := row.Scan(&i.ChannelID, &i.MessageID)
	return i, err
}

const deletePlayerLifeboard = `-- name: DeletePlayerLifeboard :exec
delete from player_lifeboard
`

func (q *Queries) DeletePlayerLifeboard(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deletePlayerLifeboard)
	return err
}

const getPlayerLifeboard = `-- name: GetPlayerLifeboard :one
select channel_id, message_id
from player_lifeboard
limit 1
`

func (q *Queries) GetPlayerLifeboard(ctx context.Context) (PlayerLifeboard, error) {
	row := q.db.QueryRow(ctx, getPlayerLifeboard)
	var i PlayerLifeboard
	err := row.Scan(&i.ChannelID, &i.MessageID)
	return i, err
}
