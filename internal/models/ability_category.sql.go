// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ability_category.sql

package models

import (
	"context"
)

const createAbilityCategoryJoin = `-- name: CreateAbilityCategoryJoin :exec
INSERT INTO ability_category (ability_id, category_id) VALUES ($1, $2)
`

type CreateAbilityCategoryJoinParams struct {
	AbilityID  int32 `json:"ability_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) CreateAbilityCategoryJoin(ctx context.Context, arg CreateAbilityCategoryJoinParams) error {
	_, err := q.db.Exec(ctx, createAbilityCategoryJoin, arg.AbilityID, arg.CategoryID)
	return err
}

const listAbilityCategoryNames = `-- name: ListAbilityCategoryNames :many
select category.name
from ability_category
inner join category on ability_category.category_id = category.id
where ability_category.ability_id = $1
`

func (q *Queries) ListAbilityCategoryNames(ctx context.Context, abilityID int32) ([]string, error) {
	rows, err := q.db.Query(ctx, listAbilityCategoryNames, abilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
